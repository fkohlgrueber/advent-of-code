
fn main() -> Result<(), Box<dyn std::error::Error>> {
    let paths = std::fs::read_dir("./").unwrap();
    let years = paths.into_iter().map(|p| p.unwrap().path()).filter(|p| p.is_dir() && p.file_name().unwrap().to_str().unwrap().starts_with("year")).collect::<Vec<_>>();

    let mods = years.iter().map(|p| p.file_name().unwrap().to_str().unwrap().to_string()).collect::<Vec<_>>();
    
    write_mods(std::path::Path::new("lib.rs"), &mods)?;

    for year in years {
        let paths = std::fs::read_dir(&year).unwrap();
        let days = paths.into_iter().map(|p| p.unwrap().path()).filter(|p| {
            let file_name = p.file_name().unwrap().to_str().unwrap();
            p.is_file() && file_name.starts_with("day") && file_name.ends_with(".rs")
        }).collect::<Vec<_>>();
        let mods = days.iter().map(|p| p.file_name().unwrap().to_str().unwrap().trim_end_matches(".rs").to_string()).collect::<Vec<_>>();
        write_mods_2(&year.join("mod.rs"), &mods)?;
    }
    Ok(())
    //panic!("Hello from build.rs");
}


fn write_mods(path: &std::path::Path, mod_names: &[String]) -> Result<(), Box<dyn std::error::Error>> {
    let mods = mod_names.iter().map(|p| format!("pub mod {};\n", p)).collect::<String>();
    
    let inserts = mod_names.iter().map(|p| format!("hm.insert({}, &{}::DAYS);\n", p.trim_start_matches("year"), p)).collect::<String>();

    let hm = format!("
    type DaysTy = std::collections::HashMap<usize, Box<dyn aoc_tools::RunChallenge + Send + Sync>>;
    lazy_static::lazy_static!{{
        pub static ref YEARS: std::collections::HashMap<usize, &'static DaysTy> = {{
            let mut hm: std::collections::HashMap<usize, &'static DaysTy> = std::collections::HashMap::new();
            {}
            hm
        }};
    }}", inserts);
    
    let content = format!("// This file is auto-generated by build.rs!\n\n{}\n\n\n{}", mods, hm);
    
    std::fs::write(path, content)?;
    Ok(())
}

fn write_mods_2(path: &std::path::Path, mod_names: &[String]) -> Result<(), Box<dyn std::error::Error>> {
    let mods = mod_names.iter().map(|p| format!("pub mod {};\n", p)).collect::<String>();
    let inserts = mod_names.iter().map(|p| format!("hm.insert({}, Box::new({}::Day()));\n", p.trim_start_matches("day"), p)).collect::<String>();

    let hm = format!("
    lazy_static::lazy_static!{{
        pub static ref DAYS: std::collections::HashMap<usize, Box<dyn aoc_tools::RunChallenge + Send + Sync>> = {{
            let mut hm: std::collections::HashMap<usize, Box<dyn aoc_tools::RunChallenge + Send + Sync>> = std::collections::HashMap::new();
            {}
            hm
        }};
    }}", inserts);

    let content = format!("// This file is auto-generated by build.rs!\n\n{}\n\n\n{}", mods, hm);
    std::fs::write(path, content)?;
    Ok(())
}